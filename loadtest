import asyncio
import websockets
import json
import random
import uuid
import aiohttp
import os
from datetime import datetime
import logging
from pathlib import Path

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)

# Sample questions for random selection
SAMPLE_QUESTIONS = [
    "How are you?",
    "What's the weather like today?",
    "Tell me a joke",
    "What time is it?",
    "Can you help me with math?",
    "What's your favorite color?",
    "Tell me about yourself",
    "What can you do?",
    "How does photosynthesis work?",
    "What's the capital of France?"
]

class WebSocketLoadTester:
    def __init__(self, websocket_url, upload_base_url, file_path, num_sessions=10):
        self.websocket_url = websocket_url
        self.upload_base_url = upload_base_url
        self.file_path = file_path
        self.num_sessions = num_sessions
        self.active_sessions = {}
        self.stats = {
            'total_messages_sent': 0,
            'total_messages_received': 0,
            'failed_connections': 0,
            'successful_uploads': 0,
            'failed_uploads': 0,
            'active_connections': 0
        }

    async def upload_file(self, client_id, session_id):
        """Upload file to the server using the client_id"""
        upload_url = f"{self.upload_base_url}/upload/{client_id}"
        
        try:
            async with aiohttp.ClientSession() as session:
                with open(self.file_path, 'rb') as f:
                    file_data = aiohttp.FormData()
                    file_data.add_field('file',
                                      f,
                                      filename=os.path.basename(self.file_path),
                                      content_type='application/octet-stream')
                    
                    async with session.post(upload_url, data=file_data) as response:
                        response_data = await response.json()
                        
                        if response.status == 200 and response_data.get('status') == 'success':
                            self.stats['successful_uploads'] += 1
                            logging.info(f"Session {session_id}: File upload successful - {response_data}")
                            return response_data.get('file_unique_id')
                        else:
                            self.stats['failed_uploads'] += 1
                            logging.error(f"Session {session_id}: File upload failed - {response_data}")
                            return None
                            
        except Exception as e:
            self.stats['failed_uploads'] += 1
            logging.error(f"Session {session_id}: File upload error - {str(e)}")
            return None

    async def send_message(self, websocket, session_id, file_unique_id=None):
        """Construct and send a message through the websocket"""
        message = {
            "id": str(random.randint(1, 1000)),
            "question": random.choice(SAMPLE_QUESTIONS),
            "custom_instruction": ".",
            "conversation_history": [
                {"role": "user", "content": "Hello!"},
                {"role": "assistant", "content": "Hi there! How can I assist you today?"}
            ],
            "digital_persona": "General Assistant",
            "skill": "General",
            "speech_mode": False,
            "input_file_unique_id": file_unique_id or str(uuid.uuid4()),
            "output_file_unique_id": str(uuid.uuid4()),
            "image_base64": ""  # Empty for testing purposes
        }
        
        try:
            await websocket.send(json.dumps(message))
            self.stats['total_messages_sent'] += 1
            logging.info(f"Session {session_id}: Message sent - {message['question']}")
        except Exception as e:
            logging.error(f"Session {session_id}: Error sending message - {str(e)}")

    async def handle_session(self, session_id):
        """Handle individual websocket session"""
        try:
            async with websockets.connect(self.websocket_url) as websocket:
                self.active_sessions[session_id] = websocket
                self.stats['active_connections'] += 1
                logging.info(f"Session {session_id}: Connected")

                # Wait for init_session response
                init_response = await websocket.recv()
                init_data = json.loads(init_response)
                
                if init_data.get('eventtype') == 'init_session':
                    client_id = init_data.get('client_id')
                    logging.info(f"Session {session_id}: Initialized with client_id {client_id}")
                    
                    # Upload file after getting client_id
                    file_unique_id = await self.upload_file(client_id, session_id)
                    
                    # Main message loop
                    while True:
                        await self.send_message(websocket, session_id, file_unique_id)
                        response = await websocket.recv()
                        self.stats['total_messages_received'] += 1
                        
                        # Add delay between messages
                        await asyncio.sleep(random.uniform(1, 3))
                
        except Exception as e:
            self.stats['failed_connections'] += 1
            logging.error(f"Session {session_id}: Connection error - {str(e)}")
        finally:
            if session_id in self.active_sessions:
                del self.active_sessions[session_id]
                self.stats['active_connections'] -= 1

    async def start_load_test(self):
        """Start the load test with multiple sessions"""
        logging.info(f"Starting load test with {self.num_sessions} sessions")
        tasks = []
        
        for i in range(self.num_sessions):
            session_id = f"session_{i+1}"
            task = asyncio.create_task(self.handle_session(session_id))
            tasks.append(task)
        
        try:
            await asyncio.gather(*tasks)
        except KeyboardInterrupt:
            logging.info("Load test interrupted by user")
        finally:
            await self.cleanup()

    async def cleanup(self):
        """Cleanup resources and print final statistics"""
        for session_id, websocket in self.active_sessions.items():
            try:
                await websocket.close()
            except:
                pass
        
        logging.info("\nLoad Test Statistics:")
        logging.info(f"Total Messages Sent: {self.stats['total_messages_sent']}")
        logging.info(f"Total Messages Received: {self.stats['total_messages_received']}")
        logging.info(f"Successful File Uploads: {self.stats['successful_uploads']}")
        logging.info(f"Failed File Uploads: {self.stats['failed_uploads']}")
        logging.info(f"Failed Connections: {self.stats['failed_connections']}")

async def main():
    # Configuration
    websocket_url = "ws://localhost:8000/ws"
    upload_base_url = "http://localhost:8000"
    file_path = "path/to/your/Resume.pdf"  # Replace with actual file path
    
    # Verify file exists
    if not Path(file_path).is_file():
        logging.error(f"File not found: {file_path}")
        return
    
    # Create and start load tester
    load_tester = WebSocketLoadTester(
        websocket_url=websocket_url,
        upload_base_url=upload_base_url,
        file_path=file_path,
        num_sessions=10
    )
    await load_tester.start_load_test()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logging.info("Program terminated by user")
