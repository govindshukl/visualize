class SessionManager:
    def __init__(self):
        self.sessions: Dict[str, SessionData] = {}
        self.session_files: Dict[str, Dict[str, FileMetadata]] = {}
        self.active_websockets: Dict[str, WebSocket] = {}
        self.client_session_map: Dict[str, str] = {}  # Maps client_id to session_id
        self.cleanup_task: Optional[asyncio.Task] = None
    
    def create_session(self) -> tuple[str, str]:
        session_id = str(uuid.uuid4())
        client_id = str(uuid.uuid4())  # Generate unique client ID
        self.sessions[session_id] = SessionData()
        self.session_files[session_id] = {}
        self.client_session_map[client_id] = session_id
        return session_id, client_id
    
    def get_session_by_client_id(self, client_id: str) -> Optional[str]:
        return self.client_session_map.get(client_id)
    
    async def cleanup_session(self, session_id: str):
        try:
            # Find and remove client_id associated with this session
            client_ids = [cid for cid, sid in self.client_session_map.items() if sid == session_id]
            for client_id in client_ids:
                self.client_session_map.pop(client_id, None)
                
            # Rest of your existing cleanup code...
            if websocket := self.active_websockets.get(session_id):
                try:
                    await websocket.send_json({
                        "type": "session_timeout",
                        "message": "Session has timed out due to inactivity"
                    })
                    await websocket.close(code=4000, reason="Session timeout")
                except Exception as e:
                    logger.error(f"Error closing websocket: {e}")
            
            # Cleanup files and other resources...
            if session_id in self.session_files:
                for metadata in self.session_files[session_id].values():
                    if metadata.vectorstore_path and os.path.exists(metadata.vectorstore_path):
                        try:
                            os.remove(metadata.vectorstore_path)
                        except Exception as e:
                            logger.error(f"Error cleaning up files: {e}")
            
            self.session_files.pop(session_id, None)
            self.sessions.pop(session_id, None)
            self.active_websockets.pop(session_id, None)
            
        except Exception as e:
            logger.error(f"Error cleaning up session {session_id}: {e}")

@router.websocket("/workforce/ai/live-chat")
async def stream(websocket: WebSocket):
    await websocket.accept()
    session_id, client_id = session_manager.create_session()
    session_manager.active_websockets[session_id] = websocket
    
    logger.info(f"WebSocket connection established for session {session_id} with client {client_id}")
    
    try:
        # Send initial connection message with both IDs
        await websocket.send_json({
            "type": "session_init",
            "session_id": session_id,
            "client_id": client_id,
            "timestamp": datetime.utcnow().isoformat(),
            "status": "connected"
        })
        
        while True:
            try:
                request = await websocket.receive_json()
                session_manager.update_activity(session_id)
                await process_request(request, websocket, session_id)
            except WebSocketDisconnect:
                logger.info(f"WebSocket disconnected for session {session_id}")
                break
                
    except Exception as e:
        logger.exception(f"Error in WebSocket connection: {e}")
    finally:
        await session_manager.cleanup_session(session_id)

@router.post("/upload/{client_id}")
async def upload_file(client_id: str, file: UploadFile = File(...)):
    # Get session_id from client_id
    session_id = session_manager.get_session_by_client_id(client_id)
    if not session_id:
        raise HTTPException(status_code=400, detail="Invalid client ID")
    
    session = session_manager.get_session(session_id)
    if not session:
        raise HTTPException(status_code=400, detail="Invalid session")
    
    if not file.filename.endswith('.pdf'):
        raise HTTPException(status_code=400, detail="Only PDF files are allowed")
    
    try:
        metadata = await file_processor.process_file(session_id, file)
        return {
            "filename": metadata.original_filename,
            "file_unique_id": metadata.file_unique_id,
            "client_id": client_id,
            "session_id": session_id,
            "status": "success",
            "message": "File uploaded and encrypted successfully"
        }
    except Exception as e:
        logger.error(f"Error processing file: {e}")
        raise HTTPException(status_code=500, detail=str(e))
